(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{218:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue-实例上的属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-实例上的属性"}},[t._v("#")]),t._v(" Vue 实例上的属性")]),t._v(" "),s("ol",{attrs:{start:"0"}},[s("li",[t._v("vm & vnode")])]),t._v(" "),s("p",[s("code",[t._v("vm")]),t._v("就是一个"),s("code",[t._v("Vue")]),t._v("的实例对象，"),s("code",[t._v("Vue")]),t._v("的组件实例也是"),s("code",[t._v("Vue")]),t._v("实例对象。"),s("code",[t._v("vnode")]),t._v("是节点的"),s("code",[t._v("javascript object")]),t._v("形式的描述。")]),t._v(" "),s("ol",[s("li",[t._v("_isVue")])]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("Vue.prototype._init")]),t._v(" method sets a property on the Vue instance object called "),s("code",[t._v("._isVue")]),t._v(" and sets it to "),s("code",[t._v("true")]),t._v(" as a flag in order to "),s("strong",[t._v("prevent it from being observed:")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("_uid")]),t._v(" "),s("li",[t._v("_isComponent")])]),t._v(" "),s("p",[s("code",[t._v("options._isComponent")]),t._v(" is only set to "),s("code",[t._v("true")]),t._v(" in one instance throughout the Vue.js source code — in the "),s("code",[t._v("createComponentInstanceForVnode")]),t._v(" function")]),t._v(" "),s("p",[t._v("如果是 VueComponent 实例就是true")]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[t._v("_self")])]),t._v(" "),s("li",[s("p",[t._v("$parent")])])]),t._v(" "),s("p",[t._v("组件实例的父组件。创建一个 "),s("code",[t._v("Vue")]),t._v(" 实例的时候，会从整个组件树上从下往上找一个"),s("strong",[t._v("非抽象")]),t._v("的父级组件作为它的父组件，该组件也会成为这个父组件的一个子组件。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initLifecycle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("vm")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// locate first non-abstract parent")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从组件树底开始遍历出第一个非抽象的父组件。所以 keep-alive里面包的组件并不会以keep-alive为父组件，因为keep-alive是个抽象组件。同样的 transition也不行。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abstract"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("abstract "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$children"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果能找到父组件，那就 vm.$root = parent.$root设置根组件")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果找不到父组件，那就是整个组件树上没有其他“真实的”组件，这次得到的Vue实例就是根组件，=> vm.$root = vm")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$root "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" parent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$root "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" vm\n\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$children "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$refs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watcher "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_inactive "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_directInactive "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isMounted "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isDestroyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  vm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isBeingDestroyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"6"}},[s("li",[t._v("$children")])]),t._v(" "),s("p",[t._v("子组件，跟"),s("code",[t._v("$parent")]),t._v("形成对比。一个组件在实例化"),s("code",[t._v("_init")]),t._v("之后，会"),s("code",[t._v("vm.$children = []")]),t._v("，此时它还没有子组件。但是后续的组件在创建的时候，就会“找爹”,然后前面的组件的"),s("code",[t._v("$children")]),t._v("就会有值了。")]),t._v(" "),s("ol",{attrs:{start:"7"}},[s("li",[t._v("_watcher & _watchers")])]),t._v(" "),s("p",[s("code",[t._v("_watcher")]),t._v("是 vm 实例对应的 render watcher，用来重新渲染更新显示的,每个实例只有一个这种 watcher。 "),s("code",[t._v("_watchers")]),t._v(" 是 vm 实例的所有 watcher 的集合，出了 render watcher 之外，其他的都是实例"),s("code",[t._v("watch")]),t._v("侦听器属性内对应得。")])])}),[],!1,null,null,null);a.default=e.exports}}]);